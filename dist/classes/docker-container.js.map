{"version":3,"sources":["../../src/classes/docker-container.js"],"names":["DockerContainer","id","name","image","command","ports","volumes","DockerPort","map","DockerVolume","status","get","container","Object","assign","Id","Image","Command","Names","Ports","Mounts","replace","Tty","port","toDockerSyntax","volume","HostConfig","Binds","filter","v","type","src","dest","Promise","resolve","reject","$dockerApi","createContainer","then","err","statusCode","dockerContainer","getContainer","start","pullStatus","stop","restart","inspect","State","Status","getAll","containers","find","c","listContainers","all","dockerContainers","DockerObject"],"mappings":"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","sourcesContent":["import {\n  DockerObject,\n  DockerVolume,\n  DockerPort,\n} from '.';\n\nexport default class DockerContainer extends DockerObject {\n  constructor({\n    id,\n    name,\n    image,\n    command,\n    ports   = [],\n    volumes = [],\n  } = {}) {\n    super();\n\n    this.id = id;\n    this.name = name;\n    this.image = image;\n    this.command = command;\n\n    this.ports = DockerPort.map(ports);\n    this.volumes = DockerVolume.map(volumes);\n\n    this.status = null;\n  }\n\n  static async get(name) {\n    const containers = await this.getAll();\n\n    return containers.find(c => c.name === name);\n  }\n\n  static async getAll() {\n    const dockerContainers = await $dockerApi.listContainers({ all: true });\n\n    return this.map(dockerContainers, true);\n  }\n\n  async get() {\n    const container = await DockerContainer.get(this.name);\n\n    Object.assign(this, container);\n    return this;\n  }\n\n  fromDockerSyntax({\n    Id      = this.id,\n    Image   = this.image,\n    Command = this.command,\n\n    Names  = null,\n    Ports  = null,\n    Mounts = null,\n  }) {\n    this.id      = Id;\n    this.image   = Image;\n    this.command = Command;\n\n    this.name    = Names  ? Names[0].replace(/^\\//, '')    : this.name;\n    this.ports   = Ports  ? DockerPort.map(Ports, true)    : this.ports;\n    this.volumes = Mounts ? DockerVolume.map(Mounts, true) : this.volumes;\n\n    return this;\n  }\n\n  toDockerSyntax() {\n    return {\n      Tty: true,\n\n      Id     : this.id,\n      name   : this.name,\n      Image  : this.image,\n      Command: this.command,\n\n      Names : [`/${this.name}`],\n      Ports : this.ports.map(port => port.toDockerSyntax()),\n      Mounts: this.volumes.map(volume => volume.toDockerSyntax()),\n\n      HostConfig: {\n        Binds: this.volumes\n          .filter(v => v.type === 'bind')\n          .map(v => `${v.src}:${v.dest}`),\n      },\n    };\n  }\n\n  create() {\n    return new Promise((resolve, reject) => {\n      $dockerApi\n        .createContainer(this.toDockerSyntax())\n        .then(({ id }) => {\n          this.id = id;\n\n          resolve(this);\n        })\n        .catch(async (err) => {\n          switch (err.statusCode) {\n            case 409:\n              await this.get();\n              resolve(this);\n              break;\n\n            default:\n              reject(err);\n              break;\n          }\n        });\n    });\n  }\n\n  start() {\n    const dockerContainer = $dockerApi.getContainer(this);\n\n    return new Promise((resolve, reject) => {\n      dockerContainer.start()\n        .then(async () => {\n          await this.pullStatus();\n          resolve(this);\n        })\n        .catch(async (err) => {\n          switch (err.statusCode) {\n            case 304:\n              await this.pullStatus();\n              resolve(this);\n              break;\n\n            default:\n              reject(err);\n              break;\n          }\n        });\n    });\n  }\n\n  stop() {\n    const dockerContainer = $dockerApi.getContainer(this);\n\n    return new Promise((resolve, reject) => {\n      dockerContainer.stop()\n        .then(async () => {\n          await this.pullStatus();\n          resolve(this);\n        })\n        .catch(async (err) => {\n          switch (err.statusCode) {\n            case 304:\n              await this.pullStatus();\n              resolve(this);\n              break;\n\n            default:\n              reject(err);\n              break;\n          }\n        });\n    });\n  }\n\n  restart() {\n    const dockerContainer = $dockerApi.getContainer(this);\n\n    return new Promise((resolve, reject) => {\n      dockerContainer.restart()\n        .then(async () => {\n          await this.pullStatus();\n          resolve(this);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  pullStatus() {\n    const dockerContainer = $dockerApi.getContainer(this);\n\n    return new Promise((resolve) => {\n      dockerContainer.inspect()\n        .then(({ State }) => {\n          this.status = State.Status;\n\n          resolve(this);\n        })\n        .catch(() => {\n          resolve(this);\n        });\n    });\n  }\n}\n"],"file":"docker-container.js"}
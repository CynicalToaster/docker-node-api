{"version":3,"sources":["../../src/classes/DockerContainer.js"],"names":["DockerContainer","name","docker","id","image","ports","volumes","dockerFile","DockerPort","map","DockerVolume","_docker","_container","getContainer","containerExists","Promise","resolve","createContainer","dockerFormat","then","container","console","log","reject","start","create","stop","restart","inspect","Image","Ports","port","HostConfig","Mounts","volume","Source","src","Target","dest","Type","type"],"mappings":"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","sourcesContent":["import {\n  DockerPort,\n  DockerVolume,\n} from './';\n\nexport default class DockerContainer {\n  constructor(\n    name,\n    {\n      id,\n      image,\n      ports = [],\n      volumes = [],\n      dockerFile,\n    },\n    docker,\n  ) {\n    this.id = id;\n    this.name = name;\n    this.image = image;\n    this.ports = DockerPort.map(ports);\n    this.volumes = DockerVolume.map(volumes);\n    this.dockerFile = dockerFile;\n\n    this._docker = docker;\n    this._container = null;\n  }\n\n  get container() {\n    if (!this._container) {\n      this._container = this._docker.getContainer(this.name);\n    }\n\n    return this._container;\n  }\n\n  build() {\n  }\n\n  async create() {\n    const containerExists = await this._docker.getContainer();\n\n    if (!this._container) {\n      await new Promise((resolve) => {\n        this._docker.createContainer(this.dockerFormat)\n          .then((container) => {\n            console.log('Created new container');\n\n            this._container = container;\n  \n            resolve(this);\n          })\n          .catch(() => resolve());\n      });\n    }\n\n    return this;\n  }\n\n  start() {\n    return new Promise((resolve, reject) => {\n      this.container.start()\n        .then(() => {\n          console.log('Started container');\n\n          resolve(this);\n        }).catch(() => {\n          console.log('Failed to start creating new container');\n  \n          this.create()\n            .then(container => {\n              console.log('Starting container');\n\n              this.container.start()\n                .then(() => resolve(this))\n                .catch(() => reject());\n            });\n        });\n    });\n  }\n\n  stop() {\n    this.container.stop();\n  }\n\n  restart() {\n    this.container.restart();\n  }\n\n  inspect() {\n    return new Promise((resolve) => {\n      this.container.inspect()\n        .then((container) => {\n          console.log('Inspect found container');\n\n          // this._container = container;\n\n          resolve(this);\n        })\n        .catch(() => resolve());\n    });\n  }\n\n  get dockerFormat() {\n    return {\n      name: this.name,\n      Image: this.image,\n      Ports: this.ports.map(port => port.dockerFormat),\n      HostConfig: {\n        Mounts: this.volumes.map(volume => ({\n          Source: volume.src,\n          Target: volume.dest,\n          Type: volume.type,\n        })),\n      },\n      // Networks: this.networks,\n    };\n  }\n\n  // set dockerFormat() {\n    \n  // }\n}\n"],"file":"DockerContainer.js"}